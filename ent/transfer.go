// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"simple-bank/ent/account"
	"simple-bank/ent/transfer"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Transfer is the model entity for the Transfer schema.
type Transfer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// FromAccountId holds the value of the "fromAccountId" field.
	FromAccountId uuid.UUID `json:"fromAccountId,omitempty"`
	// ToAccountId holds the value of the "toAccountId" field.
	ToAccountId uuid.UUID `json:"toAccountId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransferQuery when eager-loading is set.
	Edges TransferEdges `json:"edges"`
}

// TransferEdges holds the relations/edges for other nodes in the graph.
type TransferEdges struct {
	// FromAccount holds the value of the fromAccount edge.
	FromAccount *Account `json:"fromAccount,omitempty"`
	// ToAccount holds the value of the toAccount edge.
	ToAccount *Account `json:"toAccount,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FromAccountOrErr returns the FromAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferEdges) FromAccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.FromAccount == nil {
			// The edge fromAccount was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.FromAccount, nil
	}
	return nil, &NotLoadedError{edge: "fromAccount"}
}

// ToAccountOrErr returns the ToAccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransferEdges) ToAccountOrErr() (*Account, error) {
	if e.loadedTypes[1] {
		if e.ToAccount == nil {
			// The edge toAccount was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.ToAccount, nil
	}
	return nil, &NotLoadedError{edge: "toAccount"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transfer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case transfer.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case transfer.FieldCreateTime, transfer.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case transfer.FieldID, transfer.FieldFromAccountId, transfer.FieldToAccountId:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transfer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transfer fields.
func (t *Transfer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transfer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case transfer.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case transfer.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case transfer.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Float64
			}
		case transfer.FieldFromAccountId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fromAccountId", values[i])
			} else if value != nil {
				t.FromAccountId = *value
			}
		case transfer.FieldToAccountId:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field toAccountId", values[i])
			} else if value != nil {
				t.ToAccountId = *value
			}
		}
	}
	return nil
}

// QueryFromAccount queries the "fromAccount" edge of the Transfer entity.
func (t *Transfer) QueryFromAccount() *AccountQuery {
	return (&TransferClient{config: t.config}).QueryFromAccount(t)
}

// QueryToAccount queries the "toAccount" edge of the Transfer entity.
func (t *Transfer) QueryToAccount() *AccountQuery {
	return (&TransferClient{config: t.config}).QueryToAccount(t)
}

// Update returns a builder for updating this Transfer.
// Note that you need to call Transfer.Unwrap() before calling this method if this Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transfer) Update() *TransferUpdateOne {
	return (&TransferClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transfer) Unwrap() *Transfer {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transfer is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", fromAccountId=")
	builder.WriteString(fmt.Sprintf("%v", t.FromAccountId))
	builder.WriteString(", toAccountId=")
	builder.WriteString(fmt.Sprintf("%v", t.ToAccountId))
	builder.WriteByte(')')
	return builder.String()
}

// Transfers is a parsable slice of Transfer.
type Transfers []*Transfer

func (t Transfers) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
