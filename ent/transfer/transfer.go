// Code generated by entc, DO NOT EDIT.

package transfer

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the transfer type in the database.
	Label = "transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldFromAccountId holds the string denoting the fromaccountid field in the database.
	FieldFromAccountId = "from_account_id"
	// FieldToAccountId holds the string denoting the toaccountid field in the database.
	FieldToAccountId = "to_account_id"
	// EdgeFromAccount holds the string denoting the fromaccount edge name in mutations.
	EdgeFromAccount = "fromAccount"
	// EdgeToAccount holds the string denoting the toaccount edge name in mutations.
	EdgeToAccount = "toAccount"
	// Table holds the table name of the transfer in the database.
	Table = "transfers"
	// FromAccountTable is the table the holds the fromAccount relation/edge.
	FromAccountTable = "transfers"
	// FromAccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	FromAccountInverseTable = "accounts"
	// FromAccountColumn is the table column denoting the fromAccount relation/edge.
	FromAccountColumn = "from_account_id"
	// ToAccountTable is the table the holds the toAccount relation/edge.
	ToAccountTable = "transfers"
	// ToAccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	ToAccountInverseTable = "accounts"
	// ToAccountColumn is the table column denoting the toAccount relation/edge.
	ToAccountColumn = "to_account_id"
)

// Columns holds all SQL columns for transfer fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldAmount,
	FieldFromAccountId,
	FieldToAccountId,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
